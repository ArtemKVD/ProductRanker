// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: product.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductViewService_SendProductView_FullMethodName = "/product.ProductViewService/SendProductView"
)

// ProductViewServiceClient is the client API for ProductViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductViewServiceClient interface {
	SendProductView(ctx context.Context, in *ProductViewRequest, opts ...grpc.CallOption) (*ProductViewResponse, error)
}

type productViewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductViewServiceClient(cc grpc.ClientConnInterface) ProductViewServiceClient {
	return &productViewServiceClient{cc}
}

func (c *productViewServiceClient) SendProductView(ctx context.Context, in *ProductViewRequest, opts ...grpc.CallOption) (*ProductViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductViewResponse)
	err := c.cc.Invoke(ctx, ProductViewService_SendProductView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductViewServiceServer is the server API for ProductViewService service.
// All implementations must embed UnimplementedProductViewServiceServer
// for forward compatibility.
type ProductViewServiceServer interface {
	SendProductView(context.Context, *ProductViewRequest) (*ProductViewResponse, error)
	mustEmbedUnimplementedProductViewServiceServer()
}

// UnimplementedProductViewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductViewServiceServer struct{}

func (UnimplementedProductViewServiceServer) SendProductView(context.Context, *ProductViewRequest) (*ProductViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProductView not implemented")
}
func (UnimplementedProductViewServiceServer) mustEmbedUnimplementedProductViewServiceServer() {}
func (UnimplementedProductViewServiceServer) testEmbeddedByValue()                            {}

// UnsafeProductViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductViewServiceServer will
// result in compilation errors.
type UnsafeProductViewServiceServer interface {
	mustEmbedUnimplementedProductViewServiceServer()
}

func RegisterProductViewServiceServer(s grpc.ServiceRegistrar, srv ProductViewServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductViewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductViewService_ServiceDesc, srv)
}

func _ProductViewService_SendProductView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductViewServiceServer).SendProductView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductViewService_SendProductView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductViewServiceServer).SendProductView(ctx, req.(*ProductViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductViewService_ServiceDesc is the grpc.ServiceDesc for ProductViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductViewService",
	HandlerType: (*ProductViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendProductView",
			Handler:    _ProductViewService_SendProductView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}

const (
	DashboardService_StreamTopProducts_FullMethodName = "/product.DashboardService/StreamTopProducts"
)

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	StreamTopProducts(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProductRating], error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) StreamTopProducts(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProductRating], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DashboardService_ServiceDesc.Streams[0], DashboardService_StreamTopProducts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, ProductRating]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DashboardService_StreamTopProductsClient = grpc.ServerStreamingClient[ProductRating]

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility.
type DashboardServiceServer interface {
	StreamTopProducts(*StreamRequest, grpc.ServerStreamingServer[ProductRating]) error
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardServiceServer struct{}

func (UnimplementedDashboardServiceServer) StreamTopProducts(*StreamRequest, grpc.ServerStreamingServer[ProductRating]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTopProducts not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}
func (UnimplementedDashboardServiceServer) testEmbeddedByValue()                          {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedDashboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_StreamTopProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashboardServiceServer).StreamTopProducts(m, &grpc.GenericServerStream[StreamRequest, ProductRating]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DashboardService_StreamTopProductsServer = grpc.ServerStreamingServer[ProductRating]

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTopProducts",
			Handler:       _DashboardService_StreamTopProducts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product.proto",
}
